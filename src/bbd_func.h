//Este arquivo contém todas as bibliotecas utilizadas neste projeto e
//todas as funções utilizadas para o funcionamento do jogo

//================================== Incluindo bibliotecas
#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include "PushButton.hpp"

//================================== Declarando constantes
#define INIT_INTERVAL 30				//Tempo inicial para atualização da posição y do item
#define INIT_TIME 1908					//Tempo inicial entre a geração das bombas
#define GROUND_COORDINATE 68			//Coordenada y do item ao tocar na linha (solo)

//================================== Declarando Bitmaps
// 'init_screen', 48x84px
const unsigned char bitmap_init_screen [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xf0, 0x00, 0x01, 0x80, 0x00, 
	0x10, 0x10, 0x00, 0x01, 0x80, 0x00, 0x1c, 0x70, 0x00, 0x01, 0x80, 0x00, 0x04, 0x40, 0x00, 0x01, 
	0x80, 0x70, 0x1c, 0x70, 0x1c, 0x01, 0x80, 0x90, 0x30, 0x18, 0x12, 0x01, 0x81, 0x1f, 0xe3, 0x8f, 
	0xf1, 0x01, 0x81, 0x00, 0x04, 0x40, 0x01, 0x01, 0x81, 0x00, 0x04, 0x40, 0x01, 0x01, 0x81, 0x1f, 
	0xe3, 0x8f, 0xf1, 0x01, 0x81, 0x60, 0x30, 0x18, 0x0d, 0x01, 0x81, 0x80, 0xdc, 0x70, 0x03, 0x01, 
	0x80, 0x01, 0x24, 0x40, 0x00, 0x01, 0x80, 0x00, 0x14, 0x40, 0x00, 0x01, 0x80, 0x00, 0x34, 0x40, 
	0x00, 0x01, 0x83, 0xf8, 0xfc, 0xc3, 0x7f, 0x01, 0x83, 0xfd, 0xfe, 0xe3, 0x7f, 0x81, 0x83, 0x05, 
	0x86, 0xf3, 0x60, 0x81, 0x83, 0xfd, 0x86, 0xdb, 0x7f, 0x81, 0x83, 0x05, 0x86, 0xcf, 0x60, 0x81, 
	0x83, 0xfd, 0xfe, 0xc7, 0x7f, 0x81, 0x83, 0xf8, 0xfc, 0xc3, 0x7f, 0x01, 0x80, 0x00, 0x04, 0x40, 
	0x00, 0x01, 0x80, 0x00, 0x04, 0x4f, 0x00, 0x01, 0x80, 0x00, 0x04, 0x58, 0x80, 0x01, 0x83, 0xf1, 
	0xfe, 0x7e, 0x7f, 0x81, 0x83, 0xf9, 0xfe, 0xff, 0x7f, 0x81, 0x83, 0x0d, 0x82, 0xc3, 0x60, 0x81, 
	0x83, 0x0d, 0xfe, 0xc3, 0x7f, 0x81, 0x83, 0x0d, 0xfc, 0xc3, 0x7f, 0x01, 0x83, 0xf9, 0xfe, 0xff, 
	0x60, 0x01, 0x9b, 0xf1, 0x86, 0x7e, 0x60, 0x31, 0x98, 0x00, 0x04, 0x40, 0x00, 0x31, 0x8c, 0x00, 
	0x44, 0x44, 0x00, 0x61, 0x8a, 0x00, 0xa4, 0x4a, 0x00, 0xa1, 0x85, 0x00, 0x94, 0x52, 0x01, 0x41, 
	0x82, 0xc0, 0x4c, 0x64, 0x06, 0x81, 0x81, 0x20, 0x20, 0x08, 0x09, 0x01, 0x81, 0x90, 0x10, 0x10, 
	0x13, 0x01, 0x80, 0xc8, 0x13, 0x90, 0x26, 0x01, 0x80, 0x44, 0x21, 0x08, 0x44, 0x01, 0x80, 0x23, 
	0xc1, 0x07, 0x88, 0x01, 0x80, 0x10, 0x01, 0x00, 0x10, 0x01, 0x80, 0x08, 0x02, 0x80, 0x20, 0x01, 
	0x80, 0x0c, 0x01, 0x00, 0x60, 0x01, 0x80, 0x07, 0xc0, 0x07, 0xc0, 0x01, 0x80, 0x00, 0x7f, 0xfc, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xf9, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x05, 0xc0, 0x02, 0x2f, 0x4a, 0x40, 0x03, 0x82, 0x03, 
	0x68, 0x6a, 0x40, 0x41, 0x84, 0xe2, 0xae, 0x5a, 0x47, 0x21, 0x82, 0x02, 0x28, 0x4a, 0x40, 0x41, 
	0x80, 0x02, 0x2f, 0x49, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xa0, 0x00, 0x00, 0x00, 
	0x00, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'sky', 48x25px
const unsigned char bitmap_sky [] PROGMEM = {
	0x00, 0xc0, 0x80, 0x00, 0x01, 0xf8, 0xfb, 0x80, 0xf8, 0x00, 0x1f, 0x0e, 0x0e, 0x00, 0x0c, 0x3f, 
	0xf0, 0x03, 0x00, 0x00, 0x06, 0x66, 0x00, 0x01, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x31, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0xf8, 0x00, 0x00, 0x00, 0xf1, 0x86, 0x04, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x38, 0x00, 0x00, 0x00, 
	0xb0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x11, 0xb0, 0x40, 0x00, 0x00, 0x00, 0x11, 0xf0, 0x70, 0x00, 
	0x00, 0x00, 0x62, 0x10, 0x70, 0x00, 0x00, 0x00, 0xdc, 0x0c, 0xd8, 0x00, 0xe3, 0xff, 0xb0, 0x07, 
	0x0d, 0x01, 0xbe, 0x00, 0x00, 0x00, 0x07, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x80, 0x63, 0xc3, 0xfe, 0x00, 0x01, 0xce, 0xfe, 
	0x00, 0x03, 0xc0, 0x06, 0x7b, 0x80, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x80
};

// 'pad', 11x3px
const unsigned char bitmap_pad [] PROGMEM = {
	0xff, 0xe0, 0x7f, 0xc0, 0x3f, 0x80
};

// 'bomb', 6x6px
const unsigned char bitmap_bomb [] PROGMEM = {
	0x30, 0x78, 0x84, 0x84, 0x84, 0x78
};

// 'heart', 7x5px
const unsigned char bitmap_heart [] PROGMEM = {
	0x6c, 0xfe, 0x7c, 0x38, 0x10
};

// 'anchor', 6x6px
const unsigned char bitmap_anchor [] PROGMEM = {
	0x30, 0x78, 0x30, 0x30, 0xb4, 0x48
};

//================================== Declarando Structs
//registro para trabalhar com o pad
struct pad{
	uint8_t life = 3;			//Variável para armazenar os pontos de vida do pad

	int points;					//Variável para armazenar os pontos do player

	uint8_t x = 18;				//Variável para controle da coordenada X do padX

	PushButton *btnL;			//Ponteiro que aponta para o botão da esquerda
	PushButton *btnR;			//Ponteiro que aponta para o botão da esquerda
};

//registro para trabalhar com os itens que caem
struct fallingItem{
	bool isBomb;				//Variável para controle do tipo do item

	uint8_t x;					//Variável para controle da coordenada x do item
	uint8_t y;					//Variável para controle da coordenada y do item

	struct fallingItem * prox;	//Variável que armazena o endereço para o próximo item
};

//================================== Declarando Funções
//Função que imprime na tela a tela inicial e a pontuação máxima
void drawInitScreen(Adafruit_PCD8544 &display, PushButton &button, int16_t record, bool &start);

//Função que pausa o game e seta a váriável para controle de um intervalo de 500 ms
void pause(Adafruit_PCD8544 &display, PushButton &button, bool &intervalPosPause);

//Função que imprime no display o campo de jogo (céu, quantidade de vidas e pontos)
void drawFieldGame(Adafruit_PCD8544 &display, pad &player);

//Função que imprime o pad no campo e altera a posição segundo o comando dos controles
void drawPad(Adafruit_PCD8544 &display, pad &player);

//Função que desenha o item na tela enquanto ele está caindo
void drawFallingItem(Adafruit_PCD8544 &display, fallingItem* &itens, float &interval, pad &player);

//Função que adiciona um novo item para a fila de itens
void addItem(fallingItem* &itens);

//Função que remove os items da fila
void removeItem(fallingItem* &itens);

//Função que verifica a colisão do item com o pad ou fim do campo
//e gerencia se o player perderá uma vida ou ganhará um ponto
void itemColision(fallingItem* &itens, pad &player, float &interval);

//Função que verifica se passou um intervalo de tempo para chamar addItem
void newItem(uint16_t &timeToAdd, unsigned long &i, fallingItem* &items);